// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServicesClient is the client API for TestServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServicesClient interface {
	// SayHello service generates a greeting message. POST example
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	// Say reads the name from url and greet. GET example
	SayHi(ctx context.Context, in *SayHiRequest, opts ...grpc.CallOption) (*SayHiResponse, error)
}

type testServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServicesClient(cc grpc.ClientConnInterface) TestServicesClient {
	return &testServicesClient{cc}
}

func (c *testServicesClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, "/api.TestServices/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServicesClient) SayHi(ctx context.Context, in *SayHiRequest, opts ...grpc.CallOption) (*SayHiResponse, error) {
	out := new(SayHiResponse)
	err := c.cc.Invoke(ctx, "/api.TestServices/SayHi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServicesServer is the server API for TestServices service.
// All implementations must embed UnimplementedTestServicesServer
// for forward compatibility
type TestServicesServer interface {
	// SayHello service generates a greeting message. POST example
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// Say reads the name from url and greet. GET example
	SayHi(context.Context, *SayHiRequest) (*SayHiResponse, error)
	mustEmbedUnimplementedTestServicesServer()
}

// UnimplementedTestServicesServer must be embedded to have forward compatible implementations.
type UnimplementedTestServicesServer struct {
}

func (UnimplementedTestServicesServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTestServicesServer) SayHi(context.Context, *SayHiRequest) (*SayHiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedTestServicesServer) mustEmbedUnimplementedTestServicesServer() {}

// UnsafeTestServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServicesServer will
// result in compilation errors.
type UnsafeTestServicesServer interface {
	mustEmbedUnimplementedTestServicesServer()
}

func RegisterTestServicesServer(s grpc.ServiceRegistrar, srv TestServicesServer) {
	s.RegisterService(&TestServices_ServiceDesc, srv)
}

func _TestServices_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServicesServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TestServices/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServicesServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServices_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServicesServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TestServices/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServicesServer).SayHi(ctx, req.(*SayHiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestServices_ServiceDesc is the grpc.ServiceDesc for TestServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TestServices",
	HandlerType: (*TestServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _TestServices_SayHello_Handler,
		},
		{
			MethodName: "SayHi",
			Handler:    _TestServices_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_api.proto",
}
